(use-modules (ice-9 rdelim))
(use-modules (srfi srfi-1))
(define sieve '())
(define mersennes '())
(define i 13)
(while (> i 2)
  (set! sieve (cons* i sieve))
  (set! i (- i 2)))
(set! sieve (cons* 2 sieve))
(while (not (null? sieve))
  (set! i (list-ref sieve 0))
  (set! sieve (filter (lambda (j) (> (modulo j i) 0)) sieve))
  (set! mersennes (cons* (1- (expt 2 i)) mersennes)))
(set! mersennes (reverse mersennes))
(define input (open-input-file (list-ref (command-line) 1)))
(let loop ((line (read-line input)))
  (cond ((not (eof-object? line))
    (let ((n (string->number line)))
      (display
        (string-join
          (map-in-order number->string
            (take-while (lambda (x) (< x n)) mersennes)) ", "))
      (newline)
      (loop (read-line input))))))
(close input)
