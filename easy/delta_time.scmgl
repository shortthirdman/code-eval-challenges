(use-modules (ice-9 format))
(use-modules (ice-9 rdelim))
(define input (open-input-file (list-ref (command-line) 1)))
(let loop ((line (read-line input)))
  (cond ((not (eof-object? line))
    (let ((s (string-split line #\ )))
      (let ((t (append (string-split (list-ref s 0) #\:)
                       (string-split (list-ref s 1) #\:))))
        (let ((u (abs (+ (* (- (string->number (list-ref t 0))
                               (string->number (list-ref t 3)))
                            3600)
                         (* (- (string->number (list-ref t 1))
                               (string->number (list-ref t 4)))
                            60)
                         (- (string->number (list-ref t 2))
                            (string->number (list-ref t 5)))))))
          (format #t "~2,,,'0@a" (quotient u 3600))
          (display #\:)
          (format #t "~2,,,'0@a" (modulo (quotient u 60) 60))
          (display #\:)
          (format #t "~2,,,'0@a" (modulo u 60))
          (newline)
          (loop (read-line input))))))))
(close input)
