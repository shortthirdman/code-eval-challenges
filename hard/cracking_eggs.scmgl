(use-modules (ice-9 rdelim))
(use-modules (ice-9 poe))
(define (floors e s)
  (if (= s 1)
    1
    (if (= e 1)
      s
      (if (or (= e 0) (= s 0))
        0
        (if (> e s)
          (funcq-floors s s)
          (+ (funcq-floors (1- e) (1- s)) (funcq-floors e (1- s)) 1))))))
(define funcq-floors (pure-funcq floors))
(define n 0)
(define input (open-input-file (list-ref (command-line) 1)))
(let loop ((line (read-line input)))
  (cond ((not (eof-object? line))
    (set! n 0)
    (let ((se (string-split line #\ )))
      (let* ((s (string->number (list-ref se 0)))
             (e (string->number (list-ref se 1))))
        (while (< (funcq-floors s n) e)
          (set! n (1+ n)))))
    (display n)
    (newline)
    (loop (read-line input)))))
(close input)
